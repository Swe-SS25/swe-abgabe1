@startuml Controller-Klasse

interface Promise<T>

package @nestjs/graphql {
  class "@Resolver" as Resolver
  hide Resolver circle

  class "@UseGuards" as UseGuards
  hide UseGuards circle

  class "@UseFilters" as UseFilters
  hide UseFilters circle

  class "@UseInterceptors" as UseInterceptors
  hide UseInterceptors circle

  class "@Mutation" as Mutation
  hide Mutation circle

  class "@Args" as Args
  hide Args circle
}

package nest-keycloak-connect {
  class AuthGuard

  class "@Roles" as Roles
  hide Roles circle
}

package supplement #DDDDDD {
  package entity #FFFFFF {
    class Supplement <<entity>>
    class Beschreibung
    class Produktbild
  }

  package service #FFFFFF {
    class SupplementWriteService << control >>
  }

  class SupplementDTO
  class SupplementUpdateDTO
  class IdInput

  class SupplementMutationResolver << control >> << @Resolver() >> << @UseGuards() >> << @UseFilters() >> << @UseInterceptors() >> {
    + @Mutation() @Roles() async create(@Args('input') supplementDTO: SupplementDTO): Promise<CreatePayload>
    + @Mutation() @Roles() async update(@Args('input') supplementUpdateDTO: SupplementUpdateDTO): Promise<UpdatePayload>
    + @Mutation() @Roles() async delete(@Args() id: IdInput): Promise<boolean>
  }

  SupplementMutationResolver o-down-> "1" SupplementWriteService : #service

  SupplementMutationResolver ..> Supplement
  SupplementMutationResolver ..> SupplementDTO
  SupplementMutationResolver ..> SupplementUpdateDTO
  SupplementMutationResolver ..> IdInput
  SupplementMutationResolver ..> Promise
  SupplementMutationResolver ..> Resolver

  SupplementMutationResolver .up.> AuthGuard
  SupplementMutationResolver .up.> Roles

  SupplementDTO .[hidden].> Supplement
  SupplementUpdateDTO .[hidden].> Supplement
  SupplementDTO .[hidden].> Promise
  SupplementUpdateDTO .[hidden].> Promise
  SupplementDTO .[hidden].> Resolver
  SupplementUpdateDTO .[hidden].> Resolver
}

hide empty members

footer (c) SWE Supplement

@enduml